//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//В файлі main.c
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
//////////////////////////////////////////////////////////////////////
#include "BUTTON_HANDLER.h" // Підключаємо бібліотеку обробника кнопок
//////////////////////////////////////////////////////////////////////
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */

/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
ADC_HandleTypeDef hadc1;

TIM_HandleTypeDef htim11;

UART_HandleTypeDef huart6;
DMA_HandleTypeDef hdma_usart6_tx;

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DMA_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART6_UART_Init(void);
static void MX_TIM11_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_DMA_Init();
  MX_ADC1_Init();
  MX_USART6_UART_Init();
  MX_TIM11_Init();
  /* USER CODE BEGIN 2 */
//////////////////////////////////////////////////////////////////////	
	BUTTON_Init(); // Ініціалізуємо бібліотеку обробника кнопок
//////////////////////////////////////////////////////////////////////
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//////////////////////////////////////////////////////////////////////
	BUTTON_Process(); // Функція для початку обробки кнопок.
		
		if(BUTTON_GetAction(KEY_2, TRIG_RISE_ONE_TIME) == BUTTON_VERY_LONG_PRESS)
		{
			HAL_GPIO_TogglePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin);
		}

////////BUTTON_GetAction(KEY_2, TRIG_RISE_ONE_TIME) == BUTTON_VERY_LONG_PRESS////////
//Функція може працювати в 3-х режимах
//1. TRIG_FALL_ONE_TIME (по спаду фронту, одноразово)
//Режим спрацьовує після відпускання кнопки. 
//данний режим може прирівнюватись до 3-х довжин часового проміжку по відпрацюванню кнопоки:
//BUTTON_SHORT_PRESS		100мс				
//BUTTON_LONG_PRESS			500мс			
//BUTTON_VERY_LONG_PRESS	1000мс
 
				
//2.TRIG_RISE_ONE_TIME (по наростанні фронту, одноразово)	
//Режим спрацьовує під час натиснутої кнопки одноразово, при досягнені одного з 3-х часових //проміжків вказаних нижче 
//BUTTON_SHORT_PRESS		100мс				
//BUTTON_LONG_PRESS			500мс			
//BUTTON_VERY_LONG_PRESS	1000мс

					
//3.TRIG_RISE_FRIQUENTLY (по наростанні фронту)
//Режим спрацьовує під час натиснутої кнопки часто, то є постійно повертає значення натиснутої кнопки при утриманні  і досягнені часового проміжку який вказаний нижче
//данний режим працює тільки з одним часовим проміжком:
//BUTTON_SHORT_PRESS		100мс				

						
	BUTTON_ResetActions(); 
	//Функція для збросу ненатиснутих кнопок
	//якщо застосовувати данну функцію, то функції які повертають значення кнопок,
	//напр. BUTTON_GetAction(KEY_2, TRIG_RISE_ONE_TIME)
	//буде постійно повертати значення натиснутої раніше кнопки,
	//навіть коли кнопку буде відпущено.
//////////////////////////////////////////////////////////////////////	
		
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}








//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//в файлі BUTTON_HANDLER.c (source)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/* Includes -----------------------------------------------------*/

#include "BUTTON_HANDLER.h"



/* Declaration and definitions ----------------------------------*/

//Configuration
//////////////////////////////////////////////////////////////////////
//заповняємо піни  кнопок, які налаштовані на контроллері:

static McuPin buttons[BUTTONS_NUM] = {{KEY_1_GPIO_Port, KEY_1_Pin},
									{KEY_2_GPIO_Port, KEY_2_Pin}};
//////////////////////////////////////////////////////////////////////
//End of configuration






//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//в файлі BUTTON_HANDLER.h (header)
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


/* Includes -----------------------------------------------------*/
#include "main.h"
//////////////////////////////////////////////////////////////////////
#include "BUTTON_HANDLER.h" // Підключаємо бібліотеку обробника кнопок
//////////////////////////////////////////////////////////////////////

/* Declarations and definitions ---------------------------------*/

//Configuration
//налаштуваємо до чого будуть притискатись кнопки +3,3v чи 0v.
#define GPIO_BUTTON_NOT_PRESSED						(GPIO_PIN_SET) // якщо не натиснута кнопка то в налаштуваннях проекту треба підтяжку пінів кнопок (pull-up)
																   // можна зробити навпаки, якщо не натиснута то підтяжка до нуля (pull-down) тоді (GPIO_PIN_RESET)
#define BUTTONS_LONG_PRESS_MS							500
#define BUTTONS_VERY_LONG_PRESS_MS				3000

//заповняєм назви кнопок, як вони будуть називатись в проекті
typedef enum {
	KEY_0,  //напр KEY_0 та KEY_1.
	KEY_1,
	BUTTONS_NUM,
} Button_ID;
	
//End of configuration	




////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//в файлі проекту stm32g0xx_it.c 
//треба додати в цьому місці функцію з бібліотеки по обробці кнопок:
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */
//////////////////////////////
	BUTTON_TimerProcess(); 			// <-- цю функцію
/////////////////////////////
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
  /* USER CODE BEGIN SysTick_IRQn 1 */
	
  /* USER CODE END SysTick_IRQn 1 */
}

//////////////////другий варіант, для функції BUTTON_TimerProcess(); можна налаштувати таймер, спрацювання переривання по переповненню таймера один раз в мілісекунду.

